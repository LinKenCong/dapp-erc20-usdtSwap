{
  "address": "0x8C02b459e8D57ad0DE4952c5a957aABf1fFEb7b0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_payee",
          "type": "address"
        },
        {
          "internalType": "address[6]",
          "name": "_wallets",
          "type": "address[6]"
        },
        {
          "internalType": "uint256[6]",
          "name": "_maxSwap",
          "type": "uint256[6]"
        },
        {
          "internalType": "uint256[6]",
          "name": "_price",
          "type": "uint256[6]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdtIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "usdtIn",
          "type": "uint256"
        }
      ],
      "name": "getTokenOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        }
      ],
      "name": "getWalletAccout",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        }
      ],
      "name": "getWalletMaxSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        }
      ],
      "name": "getWalletPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getWalletSwapOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        }
      ],
      "name": "purchasableTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdtIn",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "swapAccounts",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "swapToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSwapAccounts",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalSwapOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSwapToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "walletIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x43f5599dab98b2f6fadd0e793df54025832f4574636c52693adcba3dc6af05c2",
  "receipt": {
    "to": null,
    "from": "0xa55BC788183d81C24b52551B9b75599FCAAA1191",
    "contractAddress": "0x8C02b459e8D57ad0DE4952c5a957aABf1fFEb7b0",
    "transactionIndex": 109,
    "gasUsed": "2129182",
    "logsBloom": "0x
    "blockHash": "0xa5dc4270b95a8beb79be958c0f7ee2a07e53cb93a4ac011df876416fae0ae8c0",
    "transactionHash": "0x43f5599dab98b2f6fadd0e793df54025832f4574636c52693adcba3dc6af05c2",
    "logs": [],
    "blockNumber": 27028374,
    "cumulativeGasUsed": "11573652",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa9A444d6AC51078bfB60F5FF755F0A037916dAEA",
    "0x55d398326f99059fF775485246999027B3197955",
    "0x10e03e9bF9F7434d40E424519b0Eae7a42eDBaa8",
    [
      "0x028AA48737610471De94ECa1aa08B5bEa28aB075",
      "0x8466335C5604bb612D345fb8488B81620578e340",
      "0xa900eAEf084f0e5764d5BA8E7a926dD04a365e53",
      "0xb65866EFC80013412Ed7Db02f032E4b0F04eC4A3",
      "0x932C93D9638D7E864fa82cFBC22c99B0E423725a",
      "0xee1c7C8402645b8fF6BA18c8A27bD9AaC8AEA505"
    ],
    [
      "5000000000000000000000000",
      "10000000000000000000000000",
      "10000000000000000000000000",
      "10000000000000000000000000",
      "10000000000000000000000000",
      "10000000000000000000000000"
    ],
    [
      "6000000000000000",
      "6500000000000000",
      "7000000000000000",
      "7500000000000000",
      "8000000000000000",
      "8500000000000000"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "624651726853bf0ad1e6be2228b57b6c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"},{\"internalType\":\"address[6]\",\"name\":\"_wallets\",\"type\":\"address[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"_maxSwap\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"_price\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"usdtIn\",\"type\":\"uint256\"}],\"name\":\"getTokenOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"getWalletAccout\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"getWalletMaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"getWalletPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getWalletSwapOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"purchasableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtIn\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"swapAccounts\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSwapAccounts\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSwapOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSwapToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/SwapToken.sol\":\"SwapToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"src/SwapToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract SwapToken {\\n    using SafeMath for uint256;\\n\\n    struct Wallet {\\n        address account;\\n        uint256 maxSwap;\\n        uint256 price;\\n    }\\n    // pay to\\n    address public immutable payee;\\n    // Token\\n    IERC20 public immutable TOKEN;\\n    // USDT\\n    IERC20 public immutable USDT;\\n    // Swap wallet address\\n    Wallet[] public wallets;\\n    // Current wallet index\\n    uint8 public walletIndex;\\n    // Total Swap Accounts\\n    uint8 public totalSwapAccounts;\\n    // Total Swap Tokens\\n    uint256 public totalSwapToken;\\n    // All accounts per wallet\\n    mapping(uint8 => uint8) public swapAccounts;\\n    // Amount of tokens exchanged per wallet\\n    mapping(uint8 => uint256) public swapToken;\\n    mapping(uint8 => mapping(address => uint256)) private _swapAccountToken;\\n    // Total Swap Token Of account\\n    mapping(address => uint256) public totalSwapOf;\\n\\n    uint8 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    constructor(\\n        address _token,\\n        address _usdt,\\n        address _payee,\\n        address[6] memory _wallets,\\n        uint256[6] memory _maxSwap,\\n        uint256[6] memory _price\\n    ) {\\n        TOKEN = IERC20(_token);\\n        USDT = IERC20(_usdt);\\n        payee = _payee;\\n\\n        for (uint256 i = 0; i < _wallets.length; i++) {\\n            require(_wallets[i] != address(0), \\\"Wallet address cannot be zero\\\");\\n            wallets.push(Wallet({account: _wallets[i], maxSwap: _maxSwap[i], price: _price[i]}));\\n        }\\n    }\\n\\n    function getWalletAccout(uint8 _index) public view returns (address) {\\n        return wallets[_index].account;\\n    }\\n\\n    function getWalletMaxSwap(uint8 _index) public view returns (uint256) {\\n        return wallets[_index].maxSwap;\\n    }\\n\\n    function getWalletPrice(uint8 _index) public view returns (uint256) {\\n        return wallets[_index].price;\\n    }\\n\\n    function getWalletSwapOf(uint8 _index, address _account) public view returns (uint256) {\\n        return _swapAccountToken[_index][_account];\\n    }\\n\\n    // Calculate the number of convertible tokens\\n    function getTokenOut(uint8 _index, uint256 usdtIn) public view returns (uint256) {\\n        uint256 price = wallets[_index].price;\\n        require(price > 0, \\\"Wallet price cannot be zero\\\");\\n        return usdtIn.mul(10 ** 18).div(price);\\n    }\\n\\n    // Calculate the current wallet convertible balance\\n    function purchasableTokens(uint8 _index) public view returns (uint256) {\\n        uint256 maxSwap = wallets[_index].maxSwap;\\n        require(maxSwap > 0, \\\"Wallet maxSwap cannot be zero\\\");\\n        uint256 swapped = swapToken[_index];\\n        if (swapped >= maxSwap) {\\n            return 0;\\n        }\\n        return maxSwap.sub(swapped);\\n    }\\n\\n    // Swap USDT to Token\\n    function swap(uint256 usdtIn) external lock {\\n        require(msg.sender != address(0), \\\"Sender address cannot be zero\\\");\\n        require(USDT.balanceOf(msg.sender) >= usdtIn, \\\"Insufficient usdt balance\\\");\\n        require(usdtIn > 0, \\\"Cannot be zero.\\\");\\n        // get swap token amount\\n        uint256 _tokenOut = getTokenOut(walletIndex, usdtIn);\\n        // get current wallet\\n        Wallet memory _wallet = wallets[walletIndex];\\n        // verify and check\\n        require(_wallet.account != address(0), \\\"The wallet should be initialized.\\\");\\n        require(purchasableTokens(walletIndex) >= _tokenOut, \\\"Insufficient tokens available for purchase.\\\");\\n        require(TOKEN.balanceOf(_wallet.account) >= _tokenOut, \\\"Insufficient contract balance.\\\");\\n        require(TOKEN.allowance(_wallet.account, address(this)) >= _tokenOut, \\\"Insufficient contract allowance.\\\");\\n        // update contract status\\n        if (totalSwapOf[msg.sender] == 0) {\\n            totalSwapAccounts++;\\n        }\\n        if (_swapAccountToken[walletIndex][msg.sender] == 0) {\\n            swapAccounts[walletIndex]++;\\n        }\\n        totalSwapToken += _tokenOut;\\n        totalSwapOf[msg.sender] += _tokenOut;\\n        swapToken[walletIndex] += _tokenOut;\\n        _swapAccountToken[walletIndex][msg.sender] += _tokenOut;\\n        // get new wallet index\\n        uint256 _purchasable = purchasableTokens(walletIndex);\\n        require(_purchasable == 0 || _purchasable >= _wallet.price, \\\"Surplus cannot be less than price.\\\");\\n        if (_purchasable == 0 && walletIndex < wallets.length - 1) {\\n            walletIndex++;\\n        }\\n        // pay usdt to payee\\n        USDT.transferFrom(msg.sender, payee, usdtIn);\\n        // transfer token to buyer\\n        TOKEN.transferFrom(_wallet.account, msg.sender, _tokenOut);\\n        emit Swap(_wallet.account, msg.sender, usdtIn, _tokenOut);\\n    }\\n\\n    event Swap(address wallet, address user, uint256 usdtIn, uint256 tokenOut);\\n}\\n\",\"keccak256\":\"0x9a9ce0baa9eea5cdf7ecc6e2fe53e27c5e90b00f4f9b652b2da039e2bad61ca4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040526001600760006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b506040516200252038038062002520833981810160405281019062000053919062000588565b8573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060005b6006811015620002a557600073ffffffffffffffffffffffffffffffffffffffff168482600681106200012a576200012962000627565b5b602002015173ffffffffffffffffffffffffffffffffffffffff160362000188576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017f90620006b7565b60405180910390fd5b60006040518060600160405280868460068110620001ab57620001aa62000627565b5b602002015173ffffffffffffffffffffffffffffffffffffffff168152602001858460068110620001e157620001e062000627565b5b6020020151815260200184846006811062000201576200020062000627565b5b6020020151815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505080806200029c9062000708565b915050620000f2565b5050505050505062000755565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002ee82620002c1565b9050919050565b6200030081620002e1565b81146200030c57600080fd5b50565b6000815190506200032081620002f5565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000376826200032b565b810181811067ffffffffffffffff821117156200039857620003976200033c565b5b80604052505050565b6000620003ad620002b2565b9050620003bb82826200036b565b919050565b600067ffffffffffffffff821115620003de57620003dd6200033c565b5b602082029050919050565b600080fd5b600062000405620003ff84620003c0565b620003a1565b90508060208402830185811115620004225762000421620003e9565b5b835b818110156200044f57806200043a88826200030f565b84526020840193505060208101905062000424565b5050509392505050565b600082601f83011262000471576200047062000326565b5b600662000480848285620003ee565b91505092915050565b600067ffffffffffffffff821115620004a757620004a66200033c565b5b602082029050919050565b6000819050919050565b620004c781620004b2565b8114620004d357600080fd5b50565b600081519050620004e781620004bc565b92915050565b600062000504620004fe8462000489565b620003a1565b90508060208402830185811115620005215762000520620003e9565b5b835b818110156200054e5780620005398882620004d6565b84526020840193505060208101905062000523565b5050509392505050565b600082601f83011262000570576200056f62000326565b5b60066200057f848285620004ed565b91505092915050565b6000806000806000806102a08789031215620005a957620005a8620002bc565b5b6000620005b989828a016200030f565b9650506020620005cc89828a016200030f565b9550506040620005df89828a016200030f565b9450506060620005f289828a0162000459565b9350506101206200060689828a0162000558565b9250506101e06200061a89828a0162000558565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f57616c6c657420616464726573732063616e6e6f74206265207a65726f000000600082015250565b60006200069f601d8362000656565b9150620006ac8262000667565b602082019050919050565b60006020820190508181036000830152620006d28162000690565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200071582620004b2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036200074a5762000749620006d9565b5b600182019050919050565b60805160a05160c051611d71620007af600039600081816105cd01528181610d960152610fb401526000818161046701528181610882015281816109620152610e57015260008181610dd30152610f900152611d716000f3fe608060405234801561001057600080fd5b506004361061010a5760003560e01c8063a8060fdf116100a2578063cc904c0311610071578063cc904c03146102d1578063d51860c314610301578063d9b0607b14610331578063ef54e06a14610361578063f9114baf146103915761010a565b8063a8060fdf14610235578063ae90b21314610265578063c54e44eb14610283578063c59256be146102a15761010a565b80637ad71f72116100de5780637ad71f721461019957806382bfefc8146101cb5780638b995c70146101e957806394b918de146102195761010a565b806298f65d1461010f5780632bfed2d01461012d5780634d7a34441461015d57806371cda07b1461017b575b600080fd5b6101176103c1565b604051610124919061124b565b60405180910390f35b61014760048036038101906101429190611297565b6103d2565b604051610154919061124b565b60405180910390f35b6101656103f2565b604051610172919061124b565b60405180910390f35b610183610405565b60405161019091906112dd565b60405180910390f35b6101b360048036038101906101ae9190611324565b61040b565b6040516101c293929190611392565b60405180910390f35b6101d3610465565b6040516101e09190611428565b60405180910390f35b61020360048036038101906101fe919061146f565b610489565b60405161021091906112dd565b60405180910390f35b610233600480360381019061022e9190611324565b6104ea565b005b61024f600480360381019061024a9190611297565b610f5d565b60405161025c91906112dd565b60405180910390f35b61026d610f8e565b60405161027a91906114af565b60405180910390f35b61028b610fb2565b6040516102989190611428565b60405180910390f35b6102bb60048036038101906102b691906114ca565b610fd6565b6040516102c891906112dd565b60405180910390f35b6102eb60048036038101906102e69190611297565b61107d565b6040516102f891906112dd565b60405180910390f35b61031b60048036038101906103169190611297565b611095565b60405161032891906112dd565b60405180910390f35b61034b60048036038101906103469190611297565b6110c6565b60405161035891906114af565b60405180910390f35b61037b6004803603810190610376919061150a565b611117565b60405161038891906112dd565b60405180910390f35b6103ab60048036038101906103a69190611297565b61112f565b6040516103b891906112dd565b60405180910390f35b60018054906101000a900460ff1681565b60036020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900460ff1681565b60025481565b6000818154811061041b57600080fd5b90600052602060002090600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560008460ff1660ff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6001600760009054906101000a900460ff1660ff161461053f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053690611594565b60405180910390fd5b6000600760006101000a81548160ff021916908360ff160217905550600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190611600565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161062491906114af565b602060405180830381865afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190611635565b10156106a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069d906116ae565b60405180910390fd5b600081116106e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e09061171a565b60405180910390fd5b6000610704600160009054906101000a900460ff1683610fd6565b9050600080600160009054906101000a900460ff1660ff168154811061072d5761072c61173a565b5b90600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1603610825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081c906117db565b60405180910390fd5b8161083e600160009054906101000a900460ff1661112f565b101561087f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108769061186d565b60405180910390fd5b817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a0823183600001516040518263ffffffff1660e01b81526004016108dd91906114af565b602060405180830381865afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e9190611635565b101561095f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610956906118d9565b60405180910390fd5b817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e8360000151306040518363ffffffff1660e01b81526004016109bf9291906118f9565b602060405180830381865afa1580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a009190611635565b1015610a41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a389061196e565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610ac05760018081819054906101000a900460ff1680929190610aa6906119bd565b91906101000a81548160ff021916908360ff160217905550505b600060056000600160009054906101000a900460ff1660ff1660ff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610b8c5760036000600160009054906101000a900460ff1660ff1660ff168152602001908152602001600020600081819054906101000a900460ff1680929190610b72906119bd565b91906101000a81548160ff021916908360ff160217905550505b8160026000828254610b9e91906119e6565b9250508190555081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bf491906119e6565b925050819055508160046000600160009054906101000a900460ff1660ff1660ff1681526020019081526020016000206000828254610c3391906119e6565b925050819055508160056000600160009054906101000a900460ff1660ff1660ff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610caf91906119e6565b925050819055506000610cd0600160009054906101000a900460ff1661112f565b90506000811480610ce5575081604001518110155b610d24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1b90611a8c565b60405180910390fd5b600081148015610d5657506001600080549050610d419190611aac565b600160009054906101000a900460ff1660ff16105b15610d94576001600081819054906101000a900460ff1680929190610d7a906119bd565b91906101000a81548160ff021916908360ff160217905550505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd337f0000000000000000000000000000000000000000000000000000000000000000876040518463ffffffff1660e01b8152600401610e1193929190611ae0565b6020604051808303816000875af1158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e549190611b4f565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd836000015133866040518463ffffffff1660e01b8152600401610eb693929190611ae0565b6020604051808303816000875af1158015610ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef99190611b4f565b507ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe2358260000151338686604051610f339493929190611b7c565b60405180910390a15050506001600760006101000a81548160ff021916908360ff16021790555050565b6000808260ff1681548110610f7557610f7461173a565b5b9060005260206000209060030201600101549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008460ff1681548110610ff057610fef61173a565b5b906000526020600020906003020160020154905060008111611047576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103e90611c0d565b60405180910390fd5b61107481611066670de0b6b3a7640000866111ed90919063ffffffff16565b61120390919063ffffffff16565b91505092915050565b60046020528060005260406000206000915090505481565b6000808260ff16815481106110ad576110ac61173a565b5b9060005260206000209060030201600201549050919050565b6000808260ff16815481106110de576110dd61173a565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60066020528060005260406000206000915090505481565b60008060008360ff16815481106111495761114861173a565b5b9060005260206000209060030201600101549050600081116111a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119790611c79565b60405180910390fd5b6000600460008560ff1660ff1681526020019081526020016000205490508181106111d0576000925050506111e8565b6111e3818361121990919063ffffffff16565b925050505b919050565b600081836111fb9190611c99565b905092915050565b600081836112119190611d0a565b905092915050565b600081836112279190611aac565b905092915050565b600060ff82169050919050565b6112458161122f565b82525050565b6000602082019050611260600083018461123c565b92915050565b600080fd5b6112748161122f565b811461127f57600080fd5b50565b6000813590506112918161126b565b92915050565b6000602082840312156112ad576112ac611266565b5b60006112bb84828501611282565b91505092915050565b6000819050919050565b6112d7816112c4565b82525050565b60006020820190506112f260008301846112ce565b92915050565b611301816112c4565b811461130c57600080fd5b50565b60008135905061131e816112f8565b92915050565b60006020828403121561133a57611339611266565b5b60006113488482850161130f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061137c82611351565b9050919050565b61138c81611371565b82525050565b60006060820190506113a76000830186611383565b6113b460208301856112ce565b6113c160408301846112ce565b949350505050565b6000819050919050565b60006113ee6113e96113e484611351565b6113c9565b611351565b9050919050565b6000611400826113d3565b9050919050565b6000611412826113f5565b9050919050565b61142281611407565b82525050565b600060208201905061143d6000830184611419565b92915050565b61144c81611371565b811461145757600080fd5b50565b60008135905061146981611443565b92915050565b6000806040838503121561148657611485611266565b5b600061149485828601611282565b92505060206114a58582860161145a565b9150509250929050565b60006020820190506114c46000830184611383565b92915050565b600080604083850312156114e1576114e0611266565b5b60006114ef85828601611282565b92505060206115008582860161130f565b9150509250929050565b6000602082840312156115205761151f611266565b5b600061152e8482850161145a565b91505092915050565b600082825260208201905092915050565b7f4c4f434b45440000000000000000000000000000000000000000000000000000600082015250565b600061157e600683611537565b915061158982611548565b602082019050919050565b600060208201905081810360008301526115ad81611571565b9050919050565b7f53656e64657220616464726573732063616e6e6f74206265207a65726f000000600082015250565b60006115ea601d83611537565b91506115f5826115b4565b602082019050919050565b60006020820190508181036000830152611619816115dd565b9050919050565b60008151905061162f816112f8565b92915050565b60006020828403121561164b5761164a611266565b5b600061165984828501611620565b91505092915050565b7f496e73756666696369656e7420757364742062616c616e636500000000000000600082015250565b6000611698601983611537565b91506116a382611662565b602082019050919050565b600060208201905081810360008301526116c78161168b565b9050919050565b7f43616e6e6f74206265207a65726f2e0000000000000000000000000000000000600082015250565b6000611704600f83611537565b915061170f826116ce565b602082019050919050565b60006020820190508181036000830152611733816116f7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5468652077616c6c65742073686f756c6420626520696e697469616c697a656460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006117c5602183611537565b91506117d082611769565b604082019050919050565b600060208201905081810360008301526117f4816117b8565b9050919050565b7f496e73756666696369656e7420746f6b656e7320617661696c61626c6520666f60008201527f722070757263686173652e000000000000000000000000000000000000000000602082015250565b6000611857602b83611537565b9150611862826117fb565b604082019050919050565b600060208201905081810360008301526118868161184a565b9050919050565b7f496e73756666696369656e7420636f6e74726163742062616c616e63652e0000600082015250565b60006118c3601e83611537565b91506118ce8261188d565b602082019050919050565b600060208201905081810360008301526118f2816118b6565b9050919050565b600060408201905061190e6000830185611383565b61191b6020830184611383565b9392505050565b7f496e73756666696369656e7420636f6e747261637420616c6c6f77616e63652e600082015250565b6000611958602083611537565b915061196382611922565b602082019050919050565b600060208201905081810360008301526119878161194b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119c88261122f565b915060ff82036119db576119da61198e565b5b600182019050919050565b60006119f1826112c4565b91506119fc836112c4565b9250828201905080821115611a1457611a1361198e565b5b92915050565b7f537572706c75732063616e6e6f74206265206c657373207468616e207072696360008201527f652e000000000000000000000000000000000000000000000000000000000000602082015250565b6000611a76602283611537565b9150611a8182611a1a565b604082019050919050565b60006020820190508181036000830152611aa581611a69565b9050919050565b6000611ab7826112c4565b9150611ac2836112c4565b9250828203905081811115611ada57611ad961198e565b5b92915050565b6000606082019050611af56000830186611383565b611b026020830185611383565b611b0f60408301846112ce565b949350505050565b60008115159050919050565b611b2c81611b17565b8114611b3757600080fd5b50565b600081519050611b4981611b23565b92915050565b600060208284031215611b6557611b64611266565b5b6000611b7384828501611b3a565b91505092915050565b6000608082019050611b916000830187611383565b611b9e6020830186611383565b611bab60408301856112ce565b611bb860608301846112ce565b95945050505050565b7f57616c6c65742070726963652063616e6e6f74206265207a65726f0000000000600082015250565b6000611bf7601b83611537565b9150611c0282611bc1565b602082019050919050565b60006020820190508181036000830152611c2681611bea565b9050919050565b7f57616c6c6574206d6178537761702063616e6e6f74206265207a65726f000000600082015250565b6000611c63601d83611537565b9150611c6e82611c2d565b602082019050919050565b60006020820190508181036000830152611c9281611c56565b9050919050565b6000611ca4826112c4565b9150611caf836112c4565b9250828202611cbd816112c4565b91508282048414831517611cd457611cd361198e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d15826112c4565b9150611d20836112c4565b925082611d3057611d2f611cdb565b5b82820490509291505056fea264697066735822122046c2c4232f97e0d474191f259fff504a95169ab11fdbd9d334dbd70aace52a5464736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010a5760003560e01c8063a8060fdf116100a2578063cc904c0311610071578063cc904c03146102d1578063d51860c314610301578063d9b0607b14610331578063ef54e06a14610361578063f9114baf146103915761010a565b8063a8060fdf14610235578063ae90b21314610265578063c54e44eb14610283578063c59256be146102a15761010a565b80637ad71f72116100de5780637ad71f721461019957806382bfefc8146101cb5780638b995c70146101e957806394b918de146102195761010a565b806298f65d1461010f5780632bfed2d01461012d5780634d7a34441461015d57806371cda07b1461017b575b600080fd5b6101176103c1565b604051610124919061124b565b60405180910390f35b61014760048036038101906101429190611297565b6103d2565b604051610154919061124b565b60405180910390f35b6101656103f2565b604051610172919061124b565b60405180910390f35b610183610405565b60405161019091906112dd565b60405180910390f35b6101b360048036038101906101ae9190611324565b61040b565b6040516101c293929190611392565b60405180910390f35b6101d3610465565b6040516101e09190611428565b60405180910390f35b61020360048036038101906101fe919061146f565b610489565b60405161021091906112dd565b60405180910390f35b610233600480360381019061022e9190611324565b6104ea565b005b61024f600480360381019061024a9190611297565b610f5d565b60405161025c91906112dd565b60405180910390f35b61026d610f8e565b60405161027a91906114af565b60405180910390f35b61028b610fb2565b6040516102989190611428565b60405180910390f35b6102bb60048036038101906102b691906114ca565b610fd6565b6040516102c891906112dd565b60405180910390f35b6102eb60048036038101906102e69190611297565b61107d565b6040516102f891906112dd565b60405180910390f35b61031b60048036038101906103169190611297565b611095565b60405161032891906112dd565b60405180910390f35b61034b60048036038101906103469190611297565b6110c6565b60405161035891906114af565b60405180910390f35b61037b6004803603810190610376919061150a565b611117565b60405161038891906112dd565b60405180910390f35b6103ab60048036038101906103a69190611297565b61112f565b6040516103b891906112dd565b60405180910390f35b60018054906101000a900460ff1681565b60036020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900460ff1681565b60025481565b6000818154811061041b57600080fd5b90600052602060002090600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560008460ff1660ff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6001600760009054906101000a900460ff1660ff161461053f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053690611594565b60405180910390fd5b6000600760006101000a81548160ff021916908360ff160217905550600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190611600565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161062491906114af565b602060405180830381865afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190611635565b10156106a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069d906116ae565b60405180910390fd5b600081116106e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e09061171a565b60405180910390fd5b6000610704600160009054906101000a900460ff1683610fd6565b9050600080600160009054906101000a900460ff1660ff168154811061072d5761072c61173a565b5b90600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1603610825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081c906117db565b60405180910390fd5b8161083e600160009054906101000a900460ff1661112f565b101561087f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108769061186d565b60405180910390fd5b817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a0823183600001516040518263ffffffff1660e01b81526004016108dd91906114af565b602060405180830381865afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e9190611635565b101561095f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610956906118d9565b60405180910390fd5b817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e8360000151306040518363ffffffff1660e01b81526004016109bf9291906118f9565b602060405180830381865afa1580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a009190611635565b1015610a41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a389061196e565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610ac05760018081819054906101000a900460ff1680929190610aa6906119bd565b91906101000a81548160ff021916908360ff160217905550505b600060056000600160009054906101000a900460ff1660ff1660ff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610b8c5760036000600160009054906101000a900460ff1660ff1660ff168152602001908152602001600020600081819054906101000a900460ff1680929190610b72906119bd565b91906101000a81548160ff021916908360ff160217905550505b8160026000828254610b9e91906119e6565b9250508190555081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bf491906119e6565b925050819055508160046000600160009054906101000a900460ff1660ff1660ff1681526020019081526020016000206000828254610c3391906119e6565b925050819055508160056000600160009054906101000a900460ff1660ff1660ff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610caf91906119e6565b925050819055506000610cd0600160009054906101000a900460ff1661112f565b90506000811480610ce5575081604001518110155b610d24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1b90611a8c565b60405180910390fd5b600081148015610d5657506001600080549050610d419190611aac565b600160009054906101000a900460ff1660ff16105b15610d94576001600081819054906101000a900460ff1680929190610d7a906119bd565b91906101000a81548160ff021916908360ff160217905550505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd337f0000000000000000000000000000000000000000000000000000000000000000876040518463ffffffff1660e01b8152600401610e1193929190611ae0565b6020604051808303816000875af1158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e549190611b4f565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd836000015133866040518463ffffffff1660e01b8152600401610eb693929190611ae0565b6020604051808303816000875af1158015610ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef99190611b4f565b507ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe2358260000151338686604051610f339493929190611b7c565b60405180910390a15050506001600760006101000a81548160ff021916908360ff16021790555050565b6000808260ff1681548110610f7557610f7461173a565b5b9060005260206000209060030201600101549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008460ff1681548110610ff057610fef61173a565b5b906000526020600020906003020160020154905060008111611047576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103e90611c0d565b60405180910390fd5b61107481611066670de0b6b3a7640000866111ed90919063ffffffff16565b61120390919063ffffffff16565b91505092915050565b60046020528060005260406000206000915090505481565b6000808260ff16815481106110ad576110ac61173a565b5b9060005260206000209060030201600201549050919050565b6000808260ff16815481106110de576110dd61173a565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60066020528060005260406000206000915090505481565b60008060008360ff16815481106111495761114861173a565b5b9060005260206000209060030201600101549050600081116111a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119790611c79565b60405180910390fd5b6000600460008560ff1660ff1681526020019081526020016000205490508181106111d0576000925050506111e8565b6111e3818361121990919063ffffffff16565b925050505b919050565b600081836111fb9190611c99565b905092915050565b600081836112119190611d0a565b905092915050565b600081836112279190611aac565b905092915050565b600060ff82169050919050565b6112458161122f565b82525050565b6000602082019050611260600083018461123c565b92915050565b600080fd5b6112748161122f565b811461127f57600080fd5b50565b6000813590506112918161126b565b92915050565b6000602082840312156112ad576112ac611266565b5b60006112bb84828501611282565b91505092915050565b6000819050919050565b6112d7816112c4565b82525050565b60006020820190506112f260008301846112ce565b92915050565b611301816112c4565b811461130c57600080fd5b50565b60008135905061131e816112f8565b92915050565b60006020828403121561133a57611339611266565b5b60006113488482850161130f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061137c82611351565b9050919050565b61138c81611371565b82525050565b60006060820190506113a76000830186611383565b6113b460208301856112ce565b6113c160408301846112ce565b949350505050565b6000819050919050565b60006113ee6113e96113e484611351565b6113c9565b611351565b9050919050565b6000611400826113d3565b9050919050565b6000611412826113f5565b9050919050565b61142281611407565b82525050565b600060208201905061143d6000830184611419565b92915050565b61144c81611371565b811461145757600080fd5b50565b60008135905061146981611443565b92915050565b6000806040838503121561148657611485611266565b5b600061149485828601611282565b92505060206114a58582860161145a565b9150509250929050565b60006020820190506114c46000830184611383565b92915050565b600080604083850312156114e1576114e0611266565b5b60006114ef85828601611282565b92505060206115008582860161130f565b9150509250929050565b6000602082840312156115205761151f611266565b5b600061152e8482850161145a565b91505092915050565b600082825260208201905092915050565b7f4c4f434b45440000000000000000000000000000000000000000000000000000600082015250565b600061157e600683611537565b915061158982611548565b602082019050919050565b600060208201905081810360008301526115ad81611571565b9050919050565b7f53656e64657220616464726573732063616e6e6f74206265207a65726f000000600082015250565b60006115ea601d83611537565b91506115f5826115b4565b602082019050919050565b60006020820190508181036000830152611619816115dd565b9050919050565b60008151905061162f816112f8565b92915050565b60006020828403121561164b5761164a611266565b5b600061165984828501611620565b91505092915050565b7f496e73756666696369656e7420757364742062616c616e636500000000000000600082015250565b6000611698601983611537565b91506116a382611662565b602082019050919050565b600060208201905081810360008301526116c78161168b565b9050919050565b7f43616e6e6f74206265207a65726f2e0000000000000000000000000000000000600082015250565b6000611704600f83611537565b915061170f826116ce565b602082019050919050565b60006020820190508181036000830152611733816116f7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5468652077616c6c65742073686f756c6420626520696e697469616c697a656460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006117c5602183611537565b91506117d082611769565b604082019050919050565b600060208201905081810360008301526117f4816117b8565b9050919050565b7f496e73756666696369656e7420746f6b656e7320617661696c61626c6520666f60008201527f722070757263686173652e000000000000000000000000000000000000000000602082015250565b6000611857602b83611537565b9150611862826117fb565b604082019050919050565b600060208201905081810360008301526118868161184a565b9050919050565b7f496e73756666696369656e7420636f6e74726163742062616c616e63652e0000600082015250565b60006118c3601e83611537565b91506118ce8261188d565b602082019050919050565b600060208201905081810360008301526118f2816118b6565b9050919050565b600060408201905061190e6000830185611383565b61191b6020830184611383565b9392505050565b7f496e73756666696369656e7420636f6e747261637420616c6c6f77616e63652e600082015250565b6000611958602083611537565b915061196382611922565b602082019050919050565b600060208201905081810360008301526119878161194b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119c88261122f565b915060ff82036119db576119da61198e565b5b600182019050919050565b60006119f1826112c4565b91506119fc836112c4565b9250828201905080821115611a1457611a1361198e565b5b92915050565b7f537572706c75732063616e6e6f74206265206c657373207468616e207072696360008201527f652e000000000000000000000000000000000000000000000000000000000000602082015250565b6000611a76602283611537565b9150611a8182611a1a565b604082019050919050565b60006020820190508181036000830152611aa581611a69565b9050919050565b6000611ab7826112c4565b9150611ac2836112c4565b9250828203905081811115611ada57611ad961198e565b5b92915050565b6000606082019050611af56000830186611383565b611b026020830185611383565b611b0f60408301846112ce565b949350505050565b60008115159050919050565b611b2c81611b17565b8114611b3757600080fd5b50565b600081519050611b4981611b23565b92915050565b600060208284031215611b6557611b64611266565b5b6000611b7384828501611b3a565b91505092915050565b6000608082019050611b916000830187611383565b611b9e6020830186611383565b611bab60408301856112ce565b611bb860608301846112ce565b95945050505050565b7f57616c6c65742070726963652063616e6e6f74206265207a65726f0000000000600082015250565b6000611bf7601b83611537565b9150611c0282611bc1565b602082019050919050565b60006020820190508181036000830152611c2681611bea565b9050919050565b7f57616c6c6574206d6178537761702063616e6e6f74206265207a65726f000000600082015250565b6000611c63601d83611537565b9150611c6e82611c2d565b602082019050919050565b60006020820190508181036000830152611c9281611c56565b9050919050565b6000611ca4826112c4565b9150611caf836112c4565b9250828202611cbd816112c4565b91508282048414831517611cd457611cd361198e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d15826112c4565b9150611d20836112c4565b925082611d3057611d2f611cdb565b5b82820490509291505056fea264697066735822122046c2c4232f97e0d474191f259fff504a95169ab11fdbd9d334dbd70aace52a5464736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 415,
        "contract": "src/SwapToken.sol:SwapToken",
        "label": "wallets",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Wallet)403_storage)dyn_storage"
      },
      {
        "astId": 417,
        "contract": "src/SwapToken.sol:SwapToken",
        "label": "walletIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 419,
        "contract": "src/SwapToken.sol:SwapToken",
        "label": "totalSwapAccounts",
        "offset": 1,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 421,
        "contract": "src/SwapToken.sol:SwapToken",
        "label": "totalSwapToken",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 425,
        "contract": "src/SwapToken.sol:SwapToken",
        "label": "swapAccounts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_uint8)"
      },
      {
        "astId": 429,
        "contract": "src/SwapToken.sol:SwapToken",
        "label": "swapToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 435,
        "contract": "src/SwapToken.sol:SwapToken",
        "label": "_swapAccountToken",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint8,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 439,
        "contract": "src/SwapToken.sol:SwapToken",
        "label": "totalSwapOf",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 442,
        "contract": "src/SwapToken.sol:SwapToken",
        "label": "unlocked",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Wallet)403_storage)dyn_storage": {
        "base": "t_struct(Wallet)403_storage",
        "encoding": "dynamic_array",
        "label": "struct SwapToken.Wallet[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_struct(Wallet)403_storage": {
        "encoding": "inplace",
        "label": "struct SwapToken.Wallet",
        "members": [
          {
            "astId": 398,
            "contract": "src/SwapToken.sol:SwapToken",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 400,
            "contract": "src/SwapToken.sol:SwapToken",
            "label": "maxSwap",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 402,
            "contract": "src/SwapToken.sol:SwapToken",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}