{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "src/SwapToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract SwapToken {\n    using SafeMath for uint256;\n\n    struct Wallet {\n        address account;\n        uint256 maxSwap;\n        uint256 price;\n    }\n    // pay to\n    address public immutable payee;\n    // Token\n    IERC20 public immutable TOKEN;\n    // USDT\n    IERC20 public immutable USDT;\n    // Swap wallet address\n    Wallet[] public wallets;\n    // Current wallet index\n    uint8 public walletIndex;\n    // Total Swap Accounts\n    uint8 public totalSwapAccounts;\n    // Total Swap Tokens\n    uint256 public totalSwapToken;\n    // All accounts per wallet\n    mapping(uint8 => uint8) public swapAccounts;\n    // Amount of tokens exchanged per wallet\n    mapping(uint8 => uint256) public swapToken;\n    mapping(uint8 => mapping(address => uint256)) private _swapAccountToken;\n    // Total Swap Token Of account\n    mapping(address => uint256) public totalSwapOf;\n\n    uint8 private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, \"LOCKED\");\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    constructor(\n        address _token,\n        address _usdt,\n        address _payee,\n        address[6] memory _wallets,\n        uint256[6] memory _maxSwap,\n        uint256[6] memory _price\n    ) {\n        TOKEN = IERC20(_token);\n        USDT = IERC20(_usdt);\n        payee = _payee;\n\n        for (uint256 i = 0; i < _wallets.length; i++) {\n            require(_wallets[i] != address(0), \"Wallet address cannot be zero\");\n            wallets.push(Wallet({account: _wallets[i], maxSwap: _maxSwap[i], price: _price[i]}));\n        }\n    }\n\n    function getWalletAccout(uint8 _index) public view returns (address) {\n        return wallets[_index].account;\n    }\n\n    function getWalletMaxSwap(uint8 _index) public view returns (uint256) {\n        return wallets[_index].maxSwap;\n    }\n\n    function getWalletPrice(uint8 _index) public view returns (uint256) {\n        return wallets[_index].price;\n    }\n\n    function getWalletSwapOf(uint8 _index, address _account) public view returns (uint256) {\n        return _swapAccountToken[_index][_account];\n    }\n\n    // Calculate the number of convertible tokens\n    function getTokenOut(uint8 _index, uint256 usdtIn) public view returns (uint256) {\n        uint256 price = wallets[_index].price;\n        require(price > 0, \"Wallet price cannot be zero\");\n        return usdtIn.mul(10 ** 18).div(price);\n    }\n\n    // Calculate the current wallet convertible balance\n    function purchasableTokens(uint8 _index) public view returns (uint256) {\n        uint256 maxSwap = wallets[_index].maxSwap;\n        require(maxSwap > 0, \"Wallet maxSwap cannot be zero\");\n        uint256 swapped = swapToken[_index];\n        if (swapped >= maxSwap) {\n            return 0;\n        }\n        return maxSwap.sub(swapped);\n    }\n\n    // Swap USDT to Token\n    function swap(uint256 usdtIn) external lock {\n        require(msg.sender != address(0), \"Sender address cannot be zero\");\n        require(USDT.balanceOf(msg.sender) >= usdtIn, \"Insufficient usdt balance\");\n        require(usdtIn > 0, \"Cannot be zero.\");\n        // get swap token amount\n        uint256 _tokenOut = getTokenOut(walletIndex, usdtIn);\n        // get current wallet\n        Wallet memory _wallet = wallets[walletIndex];\n        // verify and check\n        require(_wallet.account != address(0), \"The wallet should be initialized.\");\n        require(purchasableTokens(walletIndex) >= _tokenOut, \"Insufficient tokens available for purchase.\");\n        require(TOKEN.balanceOf(_wallet.account) >= _tokenOut, \"Insufficient contract balance.\");\n        require(TOKEN.allowance(_wallet.account, address(this)) >= _tokenOut, \"Insufficient contract allowance.\");\n        // update contract status\n        if (totalSwapOf[msg.sender] == 0) {\n            totalSwapAccounts++;\n        }\n        if (_swapAccountToken[walletIndex][msg.sender] == 0) {\n            swapAccounts[walletIndex]++;\n        }\n        totalSwapToken += _tokenOut;\n        totalSwapOf[msg.sender] += _tokenOut;\n        swapToken[walletIndex] += _tokenOut;\n        _swapAccountToken[walletIndex][msg.sender] += _tokenOut;\n        // get new wallet index\n        uint256 _purchasable = purchasableTokens(walletIndex);\n        require(_purchasable == 0 || _purchasable >= _wallet.price, \"Surplus cannot be less than price.\");\n        if (_purchasable == 0 && walletIndex < wallets.length - 1) {\n            walletIndex++;\n        }\n        // pay usdt to payee\n        USDT.transferFrom(msg.sender, payee, usdtIn);\n        // transfer token to buyer\n        TOKEN.transferFrom(_wallet.account, msg.sender, _tokenOut);\n        emit Swap(_wallet.account, msg.sender, usdtIn, _tokenOut);\n    }\n\n    event Swap(address wallet, address user, uint256 usdtIn, uint256 tokenOut);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}